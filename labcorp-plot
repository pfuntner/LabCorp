#! /usr/bin/env python3

import re
import sys
import json
import signal
import logging
import argparse

import matplotlib
import matplotlib.pyplot as plt

def normalize(title):
  titles = [title]

  if title == 'LDL Chol Calc (NIH)':
    titles = ['LDL Cholesterol Calc']
  elif title == 'eGFR If NonAfricn Am':
    titles = ['eGFR']
  elif title == 'eGFR If Africn Am':
    titles = list()

  return titles

def add(data, title, reading):
  if title not in data.keys():
    data[title] = dict()
  data[title][reading['date']] = reading

parser = argparse.ArgumentParser(description='Plot LabCorp results')
parser.add_argument('paths', metavar='path', nargs='+', help='Paths to one or more JSON files produced by labcorp-parse')
parser.add_argument('-v', '--verbose', action='count', help='Enable debugging')
args = parser.parse_args()

logging.basicConfig(format='%(asctime)s %(levelname)s %(pathname)s:%(lineno)d %(msg)s')
log = logging.getLogger(sys.argv[0])
log.setLevel(logging.WARNING - (args.verbose or 0)*10)

signal.signal(signal.SIGPIPE, lambda signum, stack_frame: exit(0))

"""
  {
    "date": "2020-01-23",
    "test": "VLDL Cholesterol Cal",
    "result": "25",
    "flag": null,
    "units": "mg/dL",
    "reference interval": "5 - 40",
    "lab": null
  }
"""

data = dict()
for path in args.paths:
  with open(path) as stream:
    readings = json.load(stream)
  for reading in readings:
    for title in normalize(reading['test']):
      add(data, title, reading)

"""
print(f'{len(data)=}')
for title in data.keys():
  print(f'{title}: {len(data[title])=}')
  print(f'{title}: {set([reading["units"] for reading in data[title].values()])}')
  print(f'{title}: {set([reading["reference interval"] for reading in data[title].values()])}')
"""

font = {'size': 7}
matplotlib.rc('font', **font)
plt.figure(figsize=(15, 9))

for title in data.keys():
  x_axis = list()
  y_axis = list()
  previous_date = None
  for curr_date in sorted(list(data[title].keys())):
    if not x_axis:
      plt.suptitle(f'{title} ({data[title][curr_date]["units"]})')
    value = float(data[title][curr_date]['result'])

    # Add min/max lines
    if previous_date:
      match = re.search(r'^([0-9.]+)?\s*([-<>])\s*([0-9.]+)?$', data[title][curr_date]["reference interval"])
      if match:
        if match.group(2) == '-':
          plt.hlines(y=float(match.group(1)), xmin=previous_date, xmax=curr_date, colors='blue', linestyles='dotted', lw=2, label='Minimum healthy value')
          plt.hlines(y=float(match.group(3)), xmin=previous_date, xmax=curr_date, colors='blue', linestyles='dotted', lw=2, label='Maximum healthy value')
        elif match.group(2) == '>':
          plt.hlines(y=float(match.group(3)), xmin=previous_date, xmax=curr_date, colors='blue', linestyles='dotted', lw=2, label='Minimum healthy value')
        elif match.group(2) == '<':
          plt.hlines(y=float(match.group(3)), xmin=previous_date, xmax=curr_date, colors='blue', linestyles='dotted', lw=2, label='Maximum healthy value')
            
    x_axis.append(curr_date)
    y_axis.append(value)

    previous_date = curr_date

  plt.xticks(rotation=90)
  plt.scatter(x_axis, y_axis)
  plt.grid()

  image_name = re.sub(r'\s|/', '_', title) + '.png'
  print(image_name)
  plt.savefig(image_name)

  plt.clf()
